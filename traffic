#!/bin/bash

##Initialization Environment Variable
source ./traffic_config

sleep 15

if [ -e $netflow_path ]; then
	
	##Check both table exist no not,if not creare one.NO is primary key
	if [ -z "$(MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "SHOW TABLES LIKE '$octets_table';")" ]; then

		MYSQL_PWD=$sql_pw mysql -u $sql_user $database \
		-e "CREATE TABLE $octets_table(NO int(10) AUTO_INCREMENT,IP text(20),In_Octets bigint(15),Out_Octets bigint(15),Total_Octets bigint(15),PRIMARY KEY(NO));"

	fi

	if [ -z "$(MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "SHOW TABLES LIKE '$flows_table';")" ]; then

		MYSQL_PWD=$sql_pw mysql -u $sql_user $database \
		-e "CREATE TABLE $flows_table(NO int(10) AUTO_INCREMENT,IP text(20),In_Flows int(10),Out_Flows int(10),Total_Flows int(10),PRIMARY KEY(NO));"

	fi
	
	#get flows and octets.format 8 is dst ip 9 is src ip
	flow-cat $netflow_path | flow-stat -f 8 | tail -n +13 | awk '{print $1,$3}' > /tmp/in_octet

	flow-cat $netflow_path | flow-stat -f 9 | tail -n +13 | awk '{print $1,$3}' > /tmp/out_octet

	flow-cat $netflow_path | flow-stat -f 8 | tail -n +13 | awk '{print $1,$2}' > /tmp/in_flow

	flow-cat $netflow_path | flow-stat -f 9 | tail -n +13 | awk '{print $1,$2}' > /tmp/out_flow

	#Combine Two File:
	#First step: NR==FNR means "when read file1" file1's $2 put into a[$1],next is break
	#Second step: if there is the same ip in array a and file2's $1 then print file2's entire row,file1'$2 and total then delete it from array
	#else print file2's entire row,0 and total is file2's $2.
	#Final step: the rest of file1's $1 in array a will print ip,0,file1's $2 and total is file1's $2
	awk 'NR==FNR{a[$1]=$2;next}{if($1 in a){print $0,a[$1],$2+a[$1];delete a[$1]}else print $0,"0",$2}END{for(x in a)print x,"0",a[x],a[x]}' /tmp/out_octet /tmp/in_octet | column -t > /tmp/total_octet

	awk 'NR==FNR{a[$1]=$2;next}{if($1 in a){print $0,a[$1],$2+a[$1];delete a[$1]}else print $0,"0",$2}END{for(x in a)print x,"0",a[x],a[x]}' /tmp/out_flow /tmp/in_flow | column -t > /tmp/total_flow

	rm /tmp/in_octet /tmp/out_octet /tmp/in_flow /tmp/out_flow

	##add previous sql data and calculate amounts of flows and octets again
	MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "SELECT IP,In_Octets,Out_Octets,Total_Octets FROM $octets_table;" | tail -n +2 >> /tmp/total_octet
	
	awk '{count[$1]+=$2;count2[$1]+=$3;count3[$1]+=$4 } END {for (i in count) print i,count[i],count2[i],count3[i]}' /tmp/total_octet |  sort -r -n -k 4 > /tmp/count_total_octet

	MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "SELECT IP,In_Flows,Out_Flows,Total_Flows FROM $flows_table;" | tail -n +2 >> /tmp/total_flow
	
	awk '{count[$1]+=$2;count2[$1]+=$3;count3[$1]+=$4 } END {for (i in count) print i,count[i],count2[i],count3[i]}' /tmp/total_flow |  sort -r -n -k 4 > /tmp/count_total_flow

	rm /tmp/total_octet /tmp/total_flow

	##drop previous data and reset AUTO_INCREMENT to 1
	MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "DELETE FROM $octets_table;ALTER TABLE $octets_table AUTO_INCREMENT = 1;"
	
	##load file into mysql faster than insert.
	MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "LOAD DATA LOCAL INFILE \"/tmp/count_total_octet\" into table $octets_table FIELDS TERMINATED BY ' ' (IP,In_Octets,Out_Octets,Total_Octets);"

	##drop previous data and reset AUTO_INCREMENT to 1
	MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "DELETE FROM $flows_table;ALTER TABLE $flows_table AUTO_INCREMENT = 1;"

	##load file into mysql faster than insert.
	MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "LOAD DATA LOCAL INFILE \"/tmp/count_total_flow\" into table $flows_table FIELDS TERMINATED BY ' ' (IP,In_Flows,Out_Flows,Total_Flows);"	

	rm /tmp/count_total_octet /tmp/count_total_flow

	#drop both tables last two months
	MYSQL_PWD=$sql_pw mysql -u $sql_user $database -e "DROP TABLE '$drop_octets','$drop_flows';"

fi
